setwd("D://wangwei")

mapk <- read.csv(file = "MAPK.txt", sep = "\t", stringsAsFactor = F)
changdu <- 1:dim(mapk)[1]
mapks <- mapk[changdu %% 2 == 0,]
mapk_list <- unlist(lapply(strsplit(mapks,";"), function(x){x[1]}))



P53 <- read.csv(file = "P53.txt", sep = "\n", stringsAsFactor = F)
changdu <- 1:dim(P53)[1]
P53s <- P53[changdu %% 2 == 0,]
P53_list <- unlist(lapply(strsplit(P53s,";"), function(x){x[1]}))



PI3K_AKT <- read.csv(file = "PI3K_AKT.txt", sep = "\t", stringsAsFactor = F)
changdu <- 1:dim(PI3K_AKT)[1]
PI3K_AKTs <- PI3K_AKT[changdu %% 2 == 0,]
PI3K_AKT_list <- unlist(lapply(strsplit(PI3K_AKTs,";"), function(x){x[1]}))


exp_tab <- read.csv(file = "genelist.txt", sep = "\t", stringsAsFactor = F)
ourlist <- read.csv(file = "genelist.txt", sep = "\t", stringsAsFactor = F)$XX


intersect(ourlist, mapk_list)
## [1] "CACNA2D3" "DDIT3"    "ATF4"     "IKBKB"    "HSPA1L"   "HSPA1B"   "HSPA1A"   "RAP1A"    "GADD45B"  "GADD45A"  "HSPA8"    "HSPA2"   
intersect(ourlist, P53_list)
## [1] "SERPINB5" "SESN2"    "GADD45B"  "GADD45A"  "SIAH1"    "PERP"     "PMAIP1"   "THBS1"   
intersect(ourlist, PI3K_AKT_list)
## [1] "DDIT4"    "ATF4"     "IKBKB"    "JAK3"     "EIF4EBP1" "ITGB8"    "PCK2"     "VEGFA"    "IL6"      "PPP2R5C"  "THBS1"   


mapkk <- intersect(ourlist, mapk_list)
P533 <- intersect(ourlist, P53_list)
PI3KK <- intersect(ourlist, PI3K_AKT_list)

 
mapkk_tab <- exp_tab[exp_tab$XX %in% mapkk, ]
P533_tab <- exp_tab[exp_tab$XX %in% P533, ]
PI3KK_tab <- exp_tab[exp_tab$XX %in% PI3KK, ]



library(pathview)

mapkk_gene_data <- mapkk_tab$Log.Fold.change
names(mapkk_gene_data) <- mapkk_tab$XX

##pv.out <- pathview(gene.data=gene.data, pathway.id="hsa04010", species="hsa", out.suffix="pathview.hsa04110.Ctrl1", kegg.native=TRUE)
## notice here:
## 1. pathway.id is specified as "04010" or a list of id numbers
## 2. need to specify the map identifiers, here we use gene symbol, so we have to use gene.idtype="SYMBOL"
## 3. all the specification list is as follows:
##> gene.idtype.list
##[1] "SYMBOL" "GENENAME" "ENSEMBL" "ENSEMBLPROT" "UNIGENE"
##[6] "UNIPROT" "ACCNUM" "ENSEMBLTRANS" "REFSEQ" "ENZYME"
##[11] "TAIR" "PROSITE" "ORF"
pv.out <- pathview(gene.data=mapkk_gene_data, gene.idtype="SYMBOL",pathway.id="04010", species="hsa", kegg.native=TRUE)

## kegg figure reference
## http://www.kegg.jp/kegg-bin/highlight_pathway?scale=1.0&map=hsa04010&keyword=04010



P533_gene_data <- P533_tab$Log.Fold.change
names(P533_gene_data) <- P533_tab$XX
pv.out <- pathview(gene.data=P533_gene_data, gene.idtype="SYMBOL",pathway.id="04115", species="hsa", kegg.native=TRUE)



PI3KK_gene_data <- PI3KK_tab$Log.Fold.change
names(PI3KK_gene_data) <- PI3KK_tab$XX
pv.out <- pathview(gene.data=PI3KK_gene_data, gene.idtype="SYMBOL",pathway.id="04151", species="hsa", kegg.native=TRUE)




######################################################################################################################
##MAPK
######################################################################################################################
mapk_all <- c("POSTN", mapk_list, ourlist)

################################################################
##111 load the biomaRt
################################################################
library(biomaRt)

## define biomart object
## 1,biomart have changed a lot in the past few months. first we need add host="www.ensembl.org here to indicate the host site.
## 2,listMarts(host = "www.ensembl.org") can tell us the name of the database, we choose the "ENSEMBL_MART_ENSEMBL" here.

mart <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host="www.ensembl.org")

################################################################
##222 look for ensemblid through gene name
################################################################

genelist <- mapk_all

results_genelist <- getBM(attributes = c("ensembl_gene_id", "ensembl_transcript_id", "ensembl_peptide_id","external_gene_name"),filters = "external_gene_name", genelist, mart = mart)


################################################################
##333 get the ensemblid needed
################################################################

feikong_related <- results_genelist[results_genelist$ensembl_peptide_id != "",]

write.table(feikong_related, file = "gene_pepid_list.txt", quote = F)
write.table(feikong_related$ensembl_peptide_id, file = "pepid_related_list.txt", row.names = F, col.names = F, quote = F)

################################################################
##444 grep in linux
################################################################
## this step can be done with R in windows, but in linux it is much more efficient.
## linkbase.txt is the file containing all the PPI relations downloaded from STRING.

## make the linux can read the file from windows
dos2unix linkbase.txt
dos2unix pepid_related_list.txt

while read pep;do grep -w $pep linkbase.txt;done > gene_pep_filtered_links.txt < pepid_related_list.txt

## trim the file for gene mapping in next step
sed 's/9606.//g' gene_pep_filtered_links.txt > filtered_table.txt

## copy this file back to windows for further analysis in cytoscape



################################################################
##555 trim the relations
################################################################
##"filtered_table.txt" file are generated in linux, so when read it, sep = "\t" is not suitable, we use sep = " " here
result_links <- read.csv(file = "filtered_table.txt", header = F, stringsAsFactor = F, sep = " ")

nonre1 <- unique(as.character(factor(result_links [,1])))
nonre2 <- unique(as.character(factor(result_links [,2])))

nonre <- c(nonre1 , nonre2 )

write.table(nonre , file ="nonredundant_id.txt", row.names = F, col.names = F, quote = F)

## nonre <- read.table(file = "nonredundant_id.txt", header = F, stringsAsFactor = F)$V1

results_id <- getBM(attributes = c("ensembl_gene_id", "ensembl_transcript_id", "ensembl_peptide_id","external_gene_name"),filters = "ensembl_peptide_id", nonre , mart = mart)

mappinglist <- results_id[,c(3,4)]

write.table(mappinglist, file = "mappinglist.txt", row.names = F, col.names = F, quote = F)


test1 <- merge(result_links, mappinglist, by.x = "V1", by.y = "ensembl_peptide_id", all.x = TRUE)


test2 <- merge(test1, mappinglist, by.x = "V2", by.y = "ensembl_peptide_id", all = F)

relation_table <- test2[,-c(1,2)]

##by far , we translate the id relations to gene-symbol relations

################################################################
##666filter the relations, it is to big
################################################################
##the relation table has duplications, for example, in PPI relation tables, we consider A-B and B-A are duplications
relation_table_f <- relation_table[duplicated(apply(cbind(relation_table$external_gene_name.x, relation_table$external_gene_name.y), 1, function(x) paste(min(x), max(x)))),]

##> dim(relation_table_f)
##[1] 519912     10

##> dim(relation_table)
##[1] 978374     10

## unique the tables
relation_table_f_u <- unique(relation_table_f)

##> dim(relation_table_f_u)
##[1] 493231     10

##there are NAs in the gene symbol list
##> length(relation_table_f_u$external_gene_name.x[relation_table_f_u$external_gene_name.x == "NA"])
##[1] 4278
##> length(relation_table_f_u$external_gene_name.y[relation_table_f_u$external_gene_name.y == "NA"])
##[1] 0

## filter the NAs
relation_table_f_u_non <- relation_table_f_u[!is.na(relation_table_f_u$external_gene_name.x),]
##> dim(relation_table_f_u_non)
##[1] 478478     10

write.table(relation_table_f_u_non, file = "clean.txt", sep = "\t", col.names = T, row.names = F, quote = F)



##genelist is the genes we want to confine to.
## this step will filter the relation of genes confined to our genelist.(both genes are in our genelist)
for (i in 1:length(relation_table_f_u_non[,1])){if (relation_table_f_u_non[i,9] %in% genelist == "TRUE" || relation_table_f_u_non [i,10] %in% genelist == "TRUE")  {relation_table_f_u_non[i,11] <- "one"}}
for (i in 1:length(relation_table_f_u_non[,1])){if (relation_table_f_u_non[i,9] %in% genelist == "TRUE" && relation_table_f_u_non [i,10] %in% genelist == "TRUE")  {relation_table_f_u_non[i,11] <- "T"}}

clean_tab <- relation_table_f_u_non[relation_table_f_u_non$V11 == "T",]

clean_tab_f <- clean_tab[duplicated(apply(cbind(clean_tab$external_gene_name.x, clean_tab$external_gene_name.y), 1, function(x) paste(min(x), max(x)))),]


write.table(clean_tab_f, file = "clean_tab.txt", sep ="\t", col.names = T, row.names = F, quote = F)


################################################################
##777 the result table is very large, I have to 
################################################################
addlist <- c(clean_tab_f[clean_tab_f$external_gene_name.x == "POSTN",]$external_gene_name.y, clean_tab_f[clean_tab_f$external_gene_name.y == "POSTN",]$external_gene_name.x)

fflist <- union(ourlist, addlist)
outlist <- setdiff(mapk_all, fflist)

##> dim(clean_tab_f)
##[1] 19594    11

clean_tab_final <- clean_tab_f[clean_tab_f$external_gene_name.x %in% fflist | clean_tab_f$external_gene_name.y %in% fflist,]
##> dim(clean_tab_final)
##[1] 12679    11

write.table(clean_tab_final, file = "cacaca.txt", row.names = F, col.names = T, sep = "\t", quote = F)



clean_tab_out <- clean_tab_f[clean_tab_f$external_gene_name.x %in% outlist & clean_tab_f$external_gene_name.y %in% outlist,]
##> dim(clean_tab_out)
##[1] 6915   11

clean_tab_test <- clean_tab_f[clean_tab_f$external_gene_name.x %in% fflist & clean_tab_f$external_gene_name.y %in% fflist,]
##> dim(clean_tab_test)
##[1] 4562   11


interesting_list <- intersect(addlist, ourlist)

ff_tab1 <- clean_tab_final[clean_tab_final$external_gene_name.x %in% interesting_list & clean_tab_final$external_gene_name.y %in% mapkk,]

ff_tab2 <- clean_tab_final[clean_tab_final$external_gene_name.x %in% mapkk & clean_tab_final$external_gene_name.y %in% interesting_list,]

ff_tab3 <- clean_tab_final[clean_tab_final$external_gene_name.x == "POSTN" | clean_tab_final$external_gene_name.y == "POSTN",]


ff_tab <- rbind(ff_tab1, ff_tab2, ff_tab3)
write.table(ff_tab, file = "haha.txt", row.names = F, col.names = T, sep = "\t", quote = F)


################################################################
##888 make the decoration data table for cytoscape
################################################################

#### 1 , count the number of edges of each node

setwd("D:\\importantbk\\working\\lab_working\\QIAN\\zhou\\20160819_PPI\\exp_tab")

re_tab <- read.csv(file = "clean_test.txt", sep = "\t", stringsAsFactor = F)


## number of nods
length(union(unique(re_tab[,9]),unique(re_tab[,10])))

## number of connections overall
dim(re_tab)[1]

## number of connections of each nod

number <- rep(NA, length(union(unique(re_tab[,9]),unique(re_tab[,10]))))

con_tab <- cbind(union(unique(re_tab[,9]),unique(re_tab[,10])), number)

genes <- union(unique(re_tab[,9]),unique(re_tab[,10]))

for (i in 1:length(union(unique(re_tab[,9]),unique(re_tab[,10])))){
	con_tab[i,2] <- length(which(re_tab[,9] == con_tab[i,1])) + length(which(re_tab[,10] == con_tab[i,1]))
}

write.table(con_tab, file = "number_of_nods.txt", quote = F, col.names = F, row.names = F, sep = "\t")


#### 2 , incorporate expression levels of each node(each gene)

## add head of the the con_tab(GeneSymbol, counts)

deco_tab <- read.csv(file = "number_of_nods.txt", sep = "\t", stringsAsFactor = F)

exp_tab <- read.csv(file = "filtered_expression_up2down1.txt", stringsAsFactor = F, sep = "\t")


test1 <- merge(deco_tab,exp_tab, by.x = "GeneSymbol", by.y = "GeneSymbol", all.x = TRUE)

write.table(test1, file = "decoration_tables.txt", col.names = T, row.names = F)








